package com.ntian.videoplayer.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ntian.videoplayer.greendao.MusicMenuDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MUSIC_MENU_DETAIL.
*/
public class MusicMenuDetailDao extends AbstractDao<MusicMenuDetail, Long> {

    public static final String TABLENAME = "MUSIC_MENU_DETAIL";

    /**
     * Properties of entity MusicMenuDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property TitlePinyin = new Property(2, String.class, "TitlePinyin", false, "TITLE_PINYIN");
        public final static Property Singer = new Property(3, String.class, "Singer", false, "SINGER");
        public final static Property Path = new Property(4, String.class, "path", false, "PATH");
        public final static Property Base_ID = new Property(5, Long.class, "Base_ID", false, "BASE__ID");
        public final static Property Musicmenu = new Property(6, String.class, "musicmenu", false, "MUSICMENU");
    };


    public MusicMenuDetailDao(DaoConfig config) {
        super(config);
    }
    
    public MusicMenuDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MUSIC_MENU_DETAIL' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'TITLE' TEXT," + // 1: Title
                "'TITLE_PINYIN' TEXT," + // 2: TitlePinyin
                "'SINGER' TEXT," + // 3: Singer
                "'PATH' TEXT," + // 4: path
                "'BASE__ID' INTEGER," + // 5: Base_ID
                "'MUSICMENU' TEXT);"); // 6: musicmenu
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MUSIC_MENU_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MusicMenuDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }
 
        String TitlePinyin = entity.getTitlePinyin();
        if (TitlePinyin != null) {
            stmt.bindString(3, TitlePinyin);
        }
 
        String Singer = entity.getSinger();
        if (Singer != null) {
            stmt.bindString(4, Singer);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(5, path);
        }
 
        Long Base_ID = entity.getBase_ID();
        if (Base_ID != null) {
            stmt.bindLong(6, Base_ID);
        }
 
        String musicmenu = entity.getMusicmenu();
        if (musicmenu != null) {
            stmt.bindString(7, musicmenu);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MusicMenuDetail readEntity(Cursor cursor, int offset) {
        MusicMenuDetail entity = new MusicMenuDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TitlePinyin
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Singer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // path
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // Base_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // musicmenu
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MusicMenuDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitlePinyin(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSinger(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBase_ID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMusicmenu(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MusicMenuDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MusicMenuDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
